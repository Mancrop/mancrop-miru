plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def keystorePropertiesFile = rootProject.file("key.properties")
def keystoreProperties = new Properties()
if (keystorePropertiesFile.exists()) {
    keystorePropertiesFile.withReader('UTF-8') { reader ->
        keystoreProperties.load(reader)
    }
}

def _storeFile = file(System.getenv("KEYSTORE") ?: keystoreProperties.getProperty("storeFile") ?: "keystore.jks")
def _storePassword = System.getenv("KEYSTORE_PASSWORD") ?: keystoreProperties.getProperty("storePassword")
def _keyAlias = System.getenv("KEY_ALIAS") ?: keystoreProperties.getProperty("keyAlias")
def _keyPassword = System.getenv("KEY_PASSWORD") ?: keystoreProperties.getProperty("keyPassword")


android {
    namespace = "miru.miaomint"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "miru.miaomint"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdkVersion = 21
        // Cannot be changed or bt-server will not start. Default is 28.
        targetSdkVersion = 33
        versionCode = flutter.versionCode
        versionName = flutter.versionName
    }

    signingConfigs {
        release {
            storeFile = _storeFile
            storePassword = _storePassword
            keyAlias = _keyAlias
            keyPassword = _keyPassword
            v1SigningEnabled = true
            v2SigningEnabled = true
        }
        // debug {
        //     storeFile = _storeFile
        //     storePassword = _storePassword
        //     keyAlias = _keyAlias
        //     keyPassword = _keyPassword
        //     v1SigningEnabled = true
        //     v2SigningEnabled = true
        // }
    }
    
    buildTypes {
        release {
            if (signingConfigs.release.storePassword != null){
                signingConfig = signingConfigs.release
            }
        }
        debug {
            // if (signingConfigs.debug.storePassword != null){
            //     signingConfig = signingConfigs.release
            // }
            signingConfig = signingConfigs.debug
        }
        // release {
        //     // TODO: Add your own signing config for the release build.
        //     // Signing with the debug keys for now, so `flutter run --release` works.
        //     signingConfig = signingConfigs.debug
        // }
    }
    flavorDimensions "mode"
    productFlavors {
        dev {
            dimension "mode"
            applicationId "miru.miaomint.dev" // 开发版本包名
            versionNameSuffix "-dev" // 可选，用于版本名后缀
        }

        prod {
            dimension "mode"
            applicationId "miru.miaomint" // 生产版本包名
            versionNameSuffix "" // 可选，用于版本名后缀
        }
    }
}

flutter {
    source '../..'
}

dependencies {

}

ext.abiCodes = ["x86_64": 1, "armeabi-v7a": 2, "arm64-v8a": 3]
import com.android.build.OutputFile
android.applicationVariants.all { variant ->
  variant.outputs.each { output ->
    def abiVersionCode = project.ext.abiCodes.get(output.getFilter(OutputFile.ABI))
    if (abiVersionCode != null) {
      output.versionCodeOverride = variant.versionCode * 10 + abiVersionCode
    }
  }
}